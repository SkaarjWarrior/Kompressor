void DrawImage256(uint16_t x_origin, uint8_t y_origin, uint16_t bg) { // pass x starting position, y starting position, background color
        uint16_t x_cursor=0;
        uint8_t  y_cursor=0;
        uint8_t i;
        uint16_t PixelColor;
        uint8_t Status;
        uint8_t Pixel;
        uint8_t ImageWidth=Image256[1]; // get the image width, upto 255 pixels
        uint16_t imagesizelsb=Image256[3];
        uint16_t imagesize=((Image256[2] * 256) + imagesizelsb); //get the imagesize in bytes as a 16 bit word
        uint16_t Index=4; //4 byte header offset, our pixel data starts here
   
  //Main loop
      While (Index<imagesize){
         Status=Image256[Index];
         
                  
         if (Status>128){ //if we have a block of same color pixels
            Status=Status-128;
            Pixel=Image256[Index+1];
            for (i=0;i<Status;i++){
               PixelColor=colors256[Pixel];
               if (Pixel<255) {display_drawPixel(x_origin + x_cursor, y_origin + y_cursor,  PixelColor);}
            
               x_cursor++;
               if (x_cursor==ImageWidth) {x_cursor=0; y_cursor++;}
         }
         Index=Index+2;
         continue;
         }
                 
         if (Status<128){ //if we have a block of different color pixels, 
            for (i=1;i<Status+1;i++){ //we iterate through each subsequent byte of data
               Pixel=Image256[Index+i];
               PixelColor=colors256[Pixel]; //get color
               if (Pixel<255) {display_drawPixel(x_origin + x_cursor, y_origin + y_cursor,  PixelColor);}
         
               x_cursor++;
               if (x_cursor==ImageWidth) {x_cursor=0; y_cursor++;}
         }
         Index=Index+Status+1;
         }
         
      }
      } // End of function
